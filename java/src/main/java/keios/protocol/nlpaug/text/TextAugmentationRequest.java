// automatically generated by the FlatBuffers compiler, do not modify

package keios.protocol.nlpaug.text;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TextAugmentationRequest extends Table {
  public static TextAugmentationRequest getRootAsTextAugmentationRequest(ByteBuffer _bb) { return getRootAsTextAugmentationRequest(_bb, new TextAugmentationRequest()); }
  public static TextAugmentationRequest getRootAsTextAugmentationRequest(ByteBuffer _bb, TextAugmentationRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public TextAugmentationRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String text() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer textInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte augmentersType(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int augmentersTypeLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer augmentersTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer augmentersTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public Table augmenters(Table obj, int j) { int o = __offset(8); return o != 0 ? __union(obj, __vector(o) + j * 4) : null; }
  public int augmentersLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createTextAugmentationRequest(FlatBufferBuilder builder,
      int textOffset,
      int augmenters_typeOffset,
      int augmentersOffset) {
    builder.startObject(3);
    TextAugmentationRequest.addAugmenters(builder, augmentersOffset);
    TextAugmentationRequest.addAugmentersType(builder, augmenters_typeOffset);
    TextAugmentationRequest.addText(builder, textOffset);
    return TextAugmentationRequest.endTextAugmentationRequest(builder);
  }

  public static void startTextAugmentationRequest(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(0, textOffset, 0); }
  public static void addAugmentersType(FlatBufferBuilder builder, int augmentersTypeOffset) { builder.addOffset(1, augmentersTypeOffset, 0); }
  public static int createAugmentersTypeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startAugmentersTypeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addAugmenters(FlatBufferBuilder builder, int augmentersOffset) { builder.addOffset(2, augmentersOffset, 0); }
  public static int createAugmentersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAugmentersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTextAugmentationRequest(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

