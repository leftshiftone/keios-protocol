// automatically generated by the FlatBuffers compiler, do not modify

package keios.protocol.spacy.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SpacyMessage extends Table {
  public static SpacyMessage getRootAsSpacyMessage(ByteBuffer _bb) { return getRootAsSpacyMessage(_bb, new SpacyMessage()); }
  public static SpacyMessage getRootAsSpacyMessage(ByteBuffer _bb, SpacyMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public SpacyMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte messageType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table message(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o) : null; }

  public static int createSpacyMessage(FlatBufferBuilder builder,
      byte message_type,
      int messageOffset) {
    builder.startObject(2);
    SpacyMessage.addMessage(builder, messageOffset);
    SpacyMessage.addMessageType(builder, message_type);
    return SpacyMessage.endSpacyMessage(builder);
  }

  public static void startSpacyMessage(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addMessageType(FlatBufferBuilder builder, byte messageType) { builder.addByte(0, messageType, 0); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(1, messageOffset, 0); }
  public static int endSpacyMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 6);  // message
    return o;
  }
  public static void finishSpacyMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedSpacyMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

