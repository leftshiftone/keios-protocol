/*
 * Copyright (c) 2016-2019, Leftshift One
 * __________________
 * [2019] Leftshift One
 * All Rights Reserved.
 * NOTICE:  All information contained herein is, and remains
 * the property of Leftshift One and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Leftshift One
 * and its suppliers and may be covered by Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Leftshift One.
 */

// automatically generated by the FlatBuffers compiler, do not modify

package keios.protocol.gensim.flatbuffers.fasttext;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class GensimFastTextMostSimilarRequest extends Table {
  public static GensimFastTextMostSimilarRequest getRootAsGensimFastTextMostSimilarRequest(ByteBuffer _bb) { return getRootAsGensimFastTextMostSimilarRequest(_bb, new GensimFastTextMostSimilarRequest()); }
  public static GensimFastTextMostSimilarRequest getRootAsGensimFastTextMostSimilarRequest(ByteBuffer _bb, GensimFastTextMostSimilarRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public GensimFastTextMostSimilarRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MostSimilarRequest requests(int j) { return requests(new MostSimilarRequest(), j); }
  public MostSimilarRequest requests(MostSimilarRequest obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int requestsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }

  public static int createGensimFastTextMostSimilarRequest(FlatBufferBuilder builder,
      int requestsOffset) {
    builder.startObject(1);
    GensimFastTextMostSimilarRequest.addRequests(builder, requestsOffset);
    return GensimFastTextMostSimilarRequest.endGensimFastTextMostSimilarRequest(builder);
  }

  public static void startGensimFastTextMostSimilarRequest(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addRequests(FlatBufferBuilder builder, int requestsOffset) { builder.addOffset(0, requestsOffset, 0); }
  public static int createRequestsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRequestsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGensimFastTextMostSimilarRequest(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

