// automatically generated by the FlatBuffers compiler, do not modify

package keios.atlas.lucene.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class LuceneReadRequest extends Table {
  public static LuceneReadRequest getRootAsLuceneReadRequest(ByteBuffer _bb) { return getRootAsLuceneReadRequest(_bb, new LuceneReadRequest()); }
  public static LuceneReadRequest getRootAsLuceneReadRequest(ByteBuffer _bb, LuceneReadRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public LuceneReadRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String field() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fieldAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer fieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String query() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer queryAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer queryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public float minimumScore() { int o = __offset(8); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public int limit() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 10; }

  public static int createLuceneReadRequest(FlatBufferBuilder builder,
      int fieldOffset,
      int queryOffset,
      float minimumScore,
      int limit) {
    builder.startObject(4);
    LuceneReadRequest.addMinimumScore(builder, minimumScore);
    LuceneReadRequest.addQuery(builder, queryOffset);
    LuceneReadRequest.addField(builder, fieldOffset);
    LuceneReadRequest.addLimit(builder, limit);
    return LuceneReadRequest.endLuceneReadRequest(builder);
  }

  public static void startLuceneReadRequest(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addField(FlatBufferBuilder builder, int fieldOffset) { builder.addOffset(0, fieldOffset, 0); }
  public static void addQuery(FlatBufferBuilder builder, int queryOffset) { builder.addOffset(1, queryOffset, 0); }
  public static void addMinimumScore(FlatBufferBuilder builder, float minimumScore) { builder.addFloat(2, minimumScore, 0.0f); }
  public static void addLimit(FlatBufferBuilder builder, int limit) { builder.addShort(3, (short)limit, (short)10); }
  public static int endLuceneReadRequest(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

