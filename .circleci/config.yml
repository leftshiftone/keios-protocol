webhook-created: &webhook-created
  name: Webhook created
  command: |
    curl $BUILD_STATUS_URL\?flow\=circleci-created -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
webhook-failed: &webhook-failed
  name: Webhook completed
  when: on_fail
  command: |
    curl $BUILD_STATUS_URL\?flow\=circleci-completed\&status\=FAILED -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true

version: 2.1
jobs:
  webhook-completed:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - run:
          name: Webhook completed
          command: |
            curl $BUILD_STATUS_URL\?flow\=circleci-completed -d '{"repository":"'"$CIRCLE_PROJECT_REPONAME"'","branch":"'"$CIRCLE_BRANCH"'","build_number":"'"$CIRCLE_PREVIOUS_BUILD_NUM"'","build_url":"'"$CIRCLE_BUILD_URL"'"}' -H "Content-Type: application/json" -X POST -i || true
  build-java:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Vienna"
      GRADLE_OPTS: '-Xmx128m -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - checkout
      - run: chmod a+x gradlew
      - restore_cache:
          key: cache-gradle-{{ checksum "build.gradle" }}
      - run: ./gradlew dependencies
      - run: mkdir -p $TEST_RESULTS_PATH
      - run: ./gradlew test --stacktrace
      - run: find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} $TEST_RESULTS_PATH \;
      - run: ./gradlew assemble --stacktrace
      - save_cache:
          paths:
            - ~/.gradle
          key: cache-gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed
  build-python:
    docker:
      - image: circleci/python:3.7.3
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Vienna"
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - checkout
      - run: mkdir -p $TEST_RESULTS_PATH
      - run: curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - run: sudo apt-get install -qq build-essential swig libpulse-dev libasound2-dev
      - run: cd ~/project/python && poetry install
      - run: cd ~/project/python && poetry run install
      - run: cd ~/project/python && poetry run test-ci
      - run: cd ~/project/python && poetry run build
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed
  release-python:
    docker:
      - image: circleci/python:3.7.3
    environment:
      TZ: "/usr/share/zoneinfo/Europe/Vienna"
      TEST_RESULTS_PATH: build/circleci/test-results
    steps:
      - run:
          <<: *webhook-created
      - add_ssh_keys:
          fingerprints:
            - "e6:4b:54:bb:ce:9c:68:e3:86:fb:0c:82:e6:a9:37:41"
      - checkout
      - run: mkdir -p $TEST_RESULTS_PATH
      - run: curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
      - run: sudo apt-get install -qq build-essential swig libpulse-dev libasound2-dev
      - run: git config --local user.email "ci@leftshift.one" && git config --local user.name "Continuous Integration"
      - run: git checkout master && git pull --tags
      - run: cd ~/project/python && poetry install
      - run: cd ~/project/python && poetry run cleanup-release $CIRCLE_TAG
      - run: cd ~/project/python && poetry run install
      - run: cd ~/project/python && poetry run test-ci
      - run: cd ~/project/python && poetry run build
      - run: cd ~/project/python && poetry run release $CIRCLE_TAG
      - store_test_results:
          path: build/circleci/test-results
      - run:
          <<: *webhook-failed

workflows:
  version: 2
  build:
    jobs:
      - build-java:
          filters:
            tags:
              ignore: /.*/
      - build-python:
          filters:
            tags:
              ignore: /.*/
      - webhook-completed:
          requires:
            - build-java
            - build-python
  release-module-python:
    jobs:
      - release-python:
          context: pypi
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-(major|minor|patch).*/
      - webhook-completed:
          requires:
            - release-python
